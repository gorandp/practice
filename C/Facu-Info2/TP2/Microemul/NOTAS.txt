* el documento original en lenguaje ensamblador es reescrito completamente en lenguaje LMM en un archivo separado llamado LMM.txt, que luego sera usado por el emulador.
* en getAux cuando salia con un return se borraba auxOP para las operaciones de transferencia solamente. Se soluciono de manera inesperada leyendo CAC hasta el simbolo de interrogacion, luego CAC hasta completar el codigo de operacion y luego CAC hasta completar el numero de linea si este tuviese. Antes se leia CAC solamente para el codigo de operacion. (CAC = caracter a caracter)
* no importa la cantidad de espacios que se introduzcan entre '?' y el cod de operacion (OP), ni tampoco entre el OP y el operando, ni tampoco despues del operando.
* el almacenaje de las direcciones de memoria para las variables se cambiaron a enteros (antes era char), gracias a que se facilita la escritura en char mediante la funcion "sprintf" que permite hacer una conversion int->char mas facil.
* cuando se hace un jump o algo similar, si el numero de linea es de 1 digito y se lo escribe sin un cero a la izquierda, habria un problema con el programa, ya que este lo dejaria sin ese cero, por lo que la palabra de la operacion quedaria de 3 digitos, lo que cambiaria el comportamiento del emulador. Para solucionar esto se agrego un codigo que transformase la cadena a int, y luego escribiese ese int como char en la cadena auxOD con 2 digitos siempre.
* se añadió que se pueda agregar un comentario al final de línea. Por ejemplo: "07 ? JMP 13 #Sirve para tal cosa", "17 ? JMP 3#Sirve para tal otra"
* en el emulador aparece cuando se le pide un INPUT al usuario y tambien cuando el numero es un OUTPUT.
